<%- include ('./partials/header') %>

<style>
    @keyframes fadeIn {
        from { opacity: 0; transform: translateY(20px); }
        to { opacity: 1; transform: translateY(0); }
    }
    @keyframes float {
        0%, 100% { transform: translateY(0); }
        50% { transform: translateY(-10px); }
    }
    @keyframes gradientPulse {
        0% { background-position: 0% 50%; }
        50% { background-position: 100% 50%; }
        100% { background-position: 0% 50%; }
    }
    .pin-animate {
        animation: fadeIn 0.8s cubic-bezier(0.22, 1, 0.36, 1) forwards;
        opacity: 0;
    }
    .pin-card {
        transition: all 0.5s cubic-bezier(0.16, 1, 0.3, 1);
        transform-style: preserve-3d;
        perspective: 1000px;
        position: relative;
        cursor: pointer;
    }
    .pin-card:hover {
        transform: translateY(-10px) scale(1.02);
    }
    .pin-card:hover .pin-image {
        transform: scale(1.05);
    }
    .pin-image {
        transition: transform 1s cubic-bezier(0.16, 1, 0.3, 1);
        backface-visibility: hidden;
        will-change: transform;
    }
    .description-text {
        display: -webkit-box;
        -webkit-line-clamp: 2;
        line-clamp: 2;
        -webkit-box-orient: vertical;
        overflow: hidden;
        text-overflow: ellipsis;
    }
    .grid-container {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(220px, 1fr));
        gap: 2rem;
    }
    .animate-float {
        animation: float 4s ease-in-out infinite;
    }
    .gradient-text {
        background: linear-gradient(90deg, #f43f5e, #f59e0b, #ec4899, #f43f5e);
        background-size: 300% 300%;
        animation: gradientPulse 6s ease infinite;
        -webkit-background-clip: text;
        background-clip: text;
        color: transparent;
    }
    .hover-glow {
        transition: box-shadow 0.4s ease;
    }
    .hover-glow:hover {
        box-shadow: 0 10px 30px -5px rgba(244, 63, 94, 0.4);
    }
    .shine-effect::after {
        content: '';
        position: absolute;
        top: 0;
        left: -100%;
        width: 50%;
        height: 100%;
        background: linear-gradient(
            to right,
            rgba(255, 255, 255, 0) 0%,
            rgba(255, 255, 255, 0.1) 50%,
            rgba(255, 255, 255, 0) 100%
        );
        transform: skewX(-20deg);
        transition: left 0.8s ease-out;
    }
    .shine-effect:hover::after {
        left: 150%;
    }
    
    /* Modal Styles */
    .modal {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background: rgba(0, 0, 0, 0.9);
        display: flex;
        align-items: center;
        justify-content: center;
        z-index: 1000;
        opacity: 0;
        visibility: hidden;
        transition: all 0.4s cubic-bezier(0.16, 1, 0.3, 1);
    }
    .modal.active {
        opacity: 1;
        visibility: visible;
    }
    .modal-content {
        max-width: 90%;
        max-height: 90vh;
        width: 800px;
        background: #1e1e1e;
        border-radius: 16px;
        overflow: hidden;
        transform: scale(0.9);
        transition: transform 0.4s cubic-bezier(0.16, 1, 0.3, 1);
        display: flex;
        flex-direction: column;
    }
    .modal.active .modal-content {
        transform: scale(1);
    }
    .modal-image-container {
        flex: 1;
        min-height: 0;
        position: relative;
    }
    .modal-image {
        width: 100%;
        height: 100%;
        object-fit: contain;
        max-height: 70vh;
    }
    .modal-details {
        padding: 20px;
        background: #1e1e1e;
    }
    .modal-title {
        font-size: 1.5rem;
        font-weight: bold;
        margin-bottom: 0.5rem;
        color: white;
    }
    .modal-description {
        color: #d1d5db;
        margin-bottom: 1rem;
    }
    .modal-close {
        position: absolute;
        top: 15px;
        right: 15px;
        background: rgba(255, 255, 255, 0.1);
        backdrop-filter: blur(10px);
        border: none;
        width: 40px;
        height: 40px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        transition: all 0.3s ease;
        z-index: 10;
    }
    .modal-close:hover {
        background: rgba(255, 255, 255, 0.2);
        transform: rotate(90deg);
    }
    .modal-close svg {
        color: white;
        width: 20px;
        height: 20px;
    }
    
    @media (max-width: 768px) {
        .grid-container {
            grid-template-columns: repeat(auto-fill, minmax(160px, 1fr));
            gap: 1.2rem;
        }
        .modal-content {
            max-width: 95%;
            max-height: 95vh;
        }
    }
    .particle {
        position: absolute;
        background: rgba(255, 255, 255, 0.6);
        border-radius: 50%;
        pointer-events: none;
        z-index: 10;
    }
</style>

<div class="w-full min-h-screen bg-gradient-to-br from-zinc-900 via-zinc-800 to-zinc-900 px-4 sm:px-10 py-8 text-white relative overflow-hidden">
    <!-- Floating background particles -->
    <div id="particles-js" class="absolute inset-0 pointer-events-none"></div>
    
    <div class="relative z-10">
        <div class="flex justify-between items-center mb-10">
            <h1 class="text-5xl font-bold gradient-text">
                Your Creative Gallery
            </h1>
            <a href="/add" class="hidden sm:flex items-center px-6 py-3 bg-gradient-to-r from-rose-600 to-amber-600 rounded-full text-white font-medium hover-glow transition-all group shine-effect relative overflow-hidden">
                <span class="relative z-10 flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2 group-hover:rotate-90 transition-transform" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                    </svg>
                    Add New
                </span>
            </a>
        </div>
        
        <% if (user.posts.length === 0) { %>
            <div class="flex flex-col items-center justify-center py-24">
                <div class="relative mb-8 animate-float">
                    <div class="absolute inset-0 rounded-full bg-rose-500/20 blur-xl"></div>
                    <svg xmlns="http://www.w3.org/2000/svg" class="h-32 w-32 text-rose-500/90" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M5 5a2 2 0 012-2h10a2 2 0 012 2v16l-7-3.5L5 21V5z" />
                    </svg>
                    <div class="absolute inset-0 flex items-center justify-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-16 w-16 text-rose-400 animate-pulse" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M12 4v16m8-8H4" />
                        </svg>
                    </div>
                </div>
                <p class="text-zinc-300 text-xl mb-8 text-center max-w-md">Your visual story begins here. <br>Add your first pin to start the journey.</p>
                <a href="/upload" class="px-8 py-4 bg-gradient-to-r from-rose-600 to-amber-600 rounded-full text-white font-medium hover-glow transition-all shine-effect relative overflow-hidden">
                    <span class="relative z-10 flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                        </svg>
                        Create First Pin
                    </span>
                </a>
            </div>
        <% } else { %>
            <div class="grid-container">
                <% user.posts.forEach(function(elem, index){ %>
                    <div class="pin-animate" style="animation-delay: <%= index * 0.05 %>s">
                        <div class="pin-card aspect-square w-full rounded-2xl overflow-hidden bg-zinc-700 shadow-xl hover:shadow-2xl hover:shadow-rose-500/30 relative group" 
                             data-id="<%= elem._id %>"
                             data-title="<%= elem.title %>"
                             data-description="<%= elem.description %>"
                             data-image="<%= elem.image %>">
                            <img 
                                src="/images/uploads/<%= elem.image %>" 
                                class="pin-image w-full h-full object-cover" 
                                alt="<%= elem.title %>"
                                loading="lazy"
                            >
                            <div class="absolute inset-0 bg-gradient-to-t from-black/80 via-transparent to-transparent opacity-0 group-hover:opacity-100 transition-opacity duration-500 flex flex-col justify-end p-5">
                                <div class="transform translate-y-4 group-hover:translate-y-0 transition-transform duration-500">
                                    <h3 class="text-white font-bold text-lg mb-2"><%= elem.title %></h3>
                                    <% if (elem.description) { %>
                                        <p class="text-zinc-300 text-sm description-text"><%= elem.description %></p>
                                    <% } %>
                                    <div class="mt-3 flex space-x-3 opacity-0 group-hover:opacity-100 transition-opacity delay-100 duration-300">
                                        <button class="p-2 bg-white/10 backdrop-blur-sm rounded-full hover:bg-white/20 transition-colors">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-8l-4-4m0 0L8 8m4-4v12" />
                                            </svg>
                                        </button>
                                        <button class="p-2 bg-white/10 backdrop-blur-sm rounded-full hover:bg-white/20 transition-colors">
                                            <svg xmlns="http://www.w3.org/2000/svg" class="h-5 w-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="1.5" d="M5 12h.01M12 12h.01M19 12h.01M6 12a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0zm7 0a1 1 0 11-2 0 1 1 0 012 0z" />
                                            </svg>
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                <% }) %>
            </div>
            
            <div class="mt-16 text-center">
                <a href="/add" class="inline-flex items-center px-8 py-4 bg-gradient-to-r from-rose-600 to-amber-600 rounded-full text-white font-medium text-lg hover-glow transition-all shine-effect relative overflow-hidden">
                    <span class="relative z-10 flex items-center">
                        <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 4v16m8-8H4" />
                        </svg>
                        
                        Add More Pins
                    </span>
                </a>
            </div>
        <% } %>
    </div>
</div>

<!-- Modal Structure -->
<div class="modal" id="imageModal">
    <div class="modal-content">
        <button class="modal-close" id="modalClose">
            <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
            </svg>
        </button>
        <div class="modal-image-container   ">
        
            <img id="modalImage" class="modal-image  rounded-lg overflow-hidden border border-zinc-700 bg-zinc-800 shadow-lg p-2 hover:shadow-xl transition duration-200 " src="" alt="">
        </div>
        <div class="modal-details">
            <h2 id="modalTitle" class="modal-title"></h2>
            <p id="modalDescription" class="modal-description"></p>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', () => {
        // Initialize particles.js
        if (typeof particlesJS !== 'undefined') {
            particlesJS('particles-js', {
                particles: {
                    number: { value: 30, density: { enable: true, value_area: 800 } },
                    color: { value: "#f43f5e" },
                    shape: { type: "circle" },
                    opacity: { value: 0.3, random: true },
                    size: { value: 3, random: true },
                    line_linked: { enable: false },
                    move: { 
                        enable: true, 
                        speed: 1, 
                        direction: "none", 
                        random: true, 
                        straight: false, 
                        out_mode: "out" 
                    }
                },
                interactivity: { detect_on: "canvas", events: { onhover: { enable: true, mode: "repulse" } } }
            });
        }

        // Add custom hover particles
        const cards = document.querySelectorAll('.pin-card');
        cards.forEach(card => {
            card.addEventListener('mousemove', (e) => {
                const rect = card.getBoundingClientRect();
                const x = e.clientX - rect.left;
                const y = e.clientY - rect.top;
                
                // Create particle
                const particle = document.createElement('div');
                particle.className = 'particle';
                particle.style.left = `${x}px`;
                particle.style.top = `${y}px`;
                particle.style.width = `${Math.random() * 5 + 2}px`;
                particle.style.height = particle.style.width;
                particle.style.opacity = Math.random() * 0.6 + 0.2;
                
                card.appendChild(particle);
                
                // Remove particle after animation
                setTimeout(() => {
                    particle.style.transform = `translate(${(Math.random() - 0.5) * 40}px, ${(Math.random() - 0.5) * 40}px)`;
                    particle.style.opacity = '0';
                    setTimeout(() => particle.remove(), 500);
                }, 50);
            });
            
            // Click handler for modal
            card.addEventListener('click', function() {
                const modal = document.getElementById('imageModal');
                const modalImage = document.getElementById('modalImage');
                const modalTitle = document.getElementById('modalTitle');
                const modalDescription = document.getElementById('modalDescription');
                
                modalImage.src = `/images/uploads/${this.dataset.image}`;
                modalTitle.textContent = this.dataset.title;
                modalDescription.textContent = this.dataset.description || '';
                
                modal.classList.add('active');
                document.body.style.overflow = 'hidden';
            });
        });
        
        // Close modal
        const modal = document.getElementById('imageModal');
        const modalClose = document.getElementById('modalClose');
        
        modalClose.addEventListener('click', function() {
            modal.classList.remove('active');
            document.body.style.overflow = '';
        });
        
        // Close modal when clicking outside
        modal.addEventListener('click', function(e) {
            if (e.target === modal) {
                modal.classList.remove('active');
                document.body.style.overflow = '';
            }
        });
        
        // Close modal with ESC key
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape' && modal.classList.contains('active')) {
                modal.classList.remove('active');
                document.body.style.overflow = '';
            }
        });
    });
</script>

<%- include ('./partials/footer') %>